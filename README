cppRange
========

A C++ static multi-dimentional range calculation library.

This library provides a set of operations on static multi-dimension range expressions.

========
A mult-dimension static range can be expressed as:

1-bit:           [3:3] or [3]
1-dimension:     [3:0]
Multi-dimension: [5:0][2:-1]

* range expression is always expressed as [higher bound : lower bound]. if the lower bound is actually larger than the higher bound, it is illegal, such as [2:3].

========
The supported calculations:

Belong to (>)
    [7:0] > [3:2]                               true
    [7:0][4:0][3:-2] > [1:0][3][1:0]            true
    [5:3][2:0] > [5:1][2:0]                     false
    [5:3][2:0] > [5:1]                          false (illegal operation)
* the two range expression must have the same number of dimensions, otherwise illegal.

Also available >=, <, <=, ==, !=

Combine (|)
    [7:3] | [4:0]                            -> [7:0]
    [5:4] | [1:0]                            -> []
    [4:0][3:1] | [4:0][5:2]                  -> [4:0][5:1]
    [1:0][5:1] | [4:2][5:1]                  -> [4:0][5:1]
    [1:0][3:1] | [4:0][5:2]                  -> []
    [1:0][3:1] | [4:0]                       -> []
* when combining two multi-dimensional ranges, only one dimension is allowed to be different, otherwise it is not combinable. Also it is combinable only when the two ranges are adjacent.

Overlap (&)
    [7:3] & [4:0]                            -> [4:3]
    [5:4] & [1:0]                            -> []
    [4:0][3:1] & [4:0][5:2]                  -> [4:0][3:2]
    [2:0][5:1] & [4:2][5:1]                  -> [2:2][5:1]
    [1:0][3:1] & [4:0][5:2]                  -> [1:0][3:2]
    [1:0][3:1] & [4:0]                       -> []
* when combining two multi-dimensional ranges, they must have the same number of dimensions.

Reduce (-)
    [7:3] - [4:0]                            -> [7:5]
    [5:4] - [1:0]                            -> [5:4]
    [4:0][3:1] - [4:0][5:2]                  -> [4:0][1]
    [2:0][5:1] - [4:2][5:1]                  -> [1:0][5:1]
    [1:0][3:1] - [4:0][5:2]                  -> []
    [1:0][3:1] - [4:0]                       -> []
* when reducing two multi-dimensional ranges, only one dimension is allowed to be different, otherwise it is not deductable. 

Standard division (^)
    [7:3] ^ [4:0]                            -> [7:5],[4:3],[2:0]
    [5:4] ^ [1:0]                            -> []
    [4:0][3:1] ^ [4:0][5:2]                  -> [4:0][5:4],[4:0][3:2],[4:0][1:1]
    [2:0][5:1] ^ [4:2][5:1]                  -> [4:2][5:1],[2:2][5:1],[1:0][5:1]
    [1:0][3:1] ^ [4:0][5:2]                  -> []
    [1:0][3:1] ^ [4:0]                       -> []
* A ^ B = {High, A&B, Low}
* Only one dimension is allowed to be different, and the two range should be adjacent.

========

Constructors:

//Build a range element (single dimension) [5:0]

RangeElement<int> r_int(5,0);

RangeElement<double> r_int;
r.first() = 5;
r.second() = 0;

//Build a multi-dimensional range [7:4][2:0] 

Range<unsigned int> r_uint;
r_uint.push_back(RangeElement<unsigned int>(7,4));
r_unit.push_back(RangeElement<unsigned int>(2,0));

std::list<RangeElement<float> > r_list;
r_list.push_back(RangeElement<float>(7,4));
r_list.push_back(RangeElement<float>(2,0));
 Range<flost> r_float(r_list);

========

To print a range

std::cout << RangeElement(5,3) << std::endl;
// [5:3]

std::cout << RangeElement(5,5) << std::endl;
// [5]

std::cout << RangeElement(5,5,false) << std::endl;
// [5:5]
// not compressed!

std::cout << r_float << std::endl;
// [7.0:4.0][2.0:0.0]

